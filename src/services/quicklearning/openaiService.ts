import OpenAI from "openai";
import { getEnvironmentConfig } from "../../config/environments";
import { getDbConnection } from "../../config/connectionManager";
import getQuickLearningChatModel from "../../models/quicklearning/chat.model";
import { ChatCompletionMessageParam, ChatCompletionTool } from "openai/resources/chat";
import {
  get_start_dates,
  register_user_name,
  submit_student_complaint,
  suggest_branch_or_virtual_course,
  suggest_nearby_branch,
} from "./openaiTools";

// Configuraci√≥n de OpenAI
const envConfig = getEnvironmentConfig();
const openai = new OpenAI({
  apiKey: envConfig.openaiApiKey,
});

// Herramientas disponibles para la IA
const tools: ChatCompletionTool[] = [
  {
    type: "function",
    function: {
      name: "get_start_dates",
      description: "Devuelve las fechas de inicio de los cursos de Quick Learning.",
      parameters: {
        type: "object",
        properties: {},
      },
    },
  },
  {
    type: "function",
    function: {
      name: "register_user_name",
      description:
        "Cuando un usuario proporciona su nombre completo, usa esta funci√≥n para registrarlo y continuar con el proceso de inscripci√≥n.",
      parameters: {
        type: "object",
        properties: {
          full_name: {
            type: "string",
            description: "El nombre completo del usuario tal como lo proporcion√≥.",
          },
        },
        required: ["full_name"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "submit_student_complaint",
      description:
        "Si el usuario menciona una queja, problema, inconveniente con un maestro o con la escuela, usa esta funci√≥n para ayudarle a reportarlo adecuadamente.",
      parameters: {
        type: "object",
        properties: {
          issue_details: {
            type: "string",
            description: "Descripci√≥n de la queja del estudiante sobre un maestro o situaci√≥n en la escuela.",
          },
        },
        required: ["issue_details"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "suggest_branch_or_virtual_course",
      description:
        "Busca si hay una sucursal o escuela o sede de Quick Learning en la ciudad del usuario. Si existe, contin√∫a la conversaci√≥n ofreciendo opciones. Si no existe, recomienda tomar el curso virtual u online.",
      parameters: {
        type: "object",
        properties: {
          city: {
            type: "string",
            description: "Nombre de la ciudad mencionada por el usuario, como GDL, Guadalajara, CDMX, etc.",
          },
        },
        required: ["city"],
      },
    },
  },
  {
    type: "function",
    function: {
      name: "suggest_nearby_branch",
      description: "Sugiere la sucursal m√°s cercana usando direcci√≥n o coordenadas.",
      parameters: {
        type: "object",
        properties: {
          address: {
            type: "string",
            description: "Direcci√≥n textual proporcionada por el usuario",
          },
          lat: {
            type: "number",
            description: "Latitud si el usuario mand√≥ su ubicaci√≥n",
          },
          lng: {
            type: "number",
            description: "Longitud si el usuario mand√≥ su ubicaci√≥n",
          },
        },
      },
    },
  },
];

/**
 * Servicio de OpenAI para Quick Learning
 */
export class QuickLearningOpenAIService {
  private static instance: QuickLearningOpenAIService;
  private readonly openai: OpenAI;

  private constructor() {
    this.openai = openai;
    this.validateConfig();
  }

  /**
   * Obtener instancia singleton del servicio
   */
  public static getInstance(): QuickLearningOpenAIService {
    if (!QuickLearningOpenAIService.instance) {
      QuickLearningOpenAIService.instance = new QuickLearningOpenAIService();
    }
    return QuickLearningOpenAIService.instance;
  }

  /**
   * Validar configuraci√≥n de OpenAI
   */
  private validateConfig(): void {
    if (!envConfig.openaiApiKey) {
      throw new Error("‚ùå OpenAI API key is not configured");
    }
    console.log("‚úÖ Quick Learning OpenAI service initialized successfully");
  }

  /**
   * Generar respuesta de IA basada en el mensaje y historial del usuario
   */
  public async generateResponse(message: string, phoneUser: string): Promise<string> {
    try {
      // Obtener conexi√≥n a la base de datos de Quick Learning
      const conn = await getDbConnection('quicklearning');
      const QuickLearningChat = getQuickLearningChatModel(conn);

      // Obtener el contexto inicial del sistema
      const initialContext = await this.generateSystemPrompt();

      // Obtener historial de mensajes del usuario
      const chatHistory = await QuickLearningChat.findOne({ phone: phoneUser });

      let chatHistoryMessages = chatHistory?.messages.map((message) => {
        return {
          role: message.direction === "inbound" ? "user" : "assistant",
          content: message.body,
          ...(message.direction !== "inbound" && { name: "assistant_name" }),
        };
      }) || [];

      // Asegurarse de que sea un array
      if (!Array.isArray(chatHistoryMessages)) {
        chatHistoryMessages = [];
      }

      // Agregar contexto inicial y mensaje del usuario
      chatHistoryMessages.unshift({
        role: "system",
        content: initialContext || "",
      });

      chatHistoryMessages.push({
        role: "user",
        content: message,
      });

      console.log(`ü§ñ Generando respuesta para: ${phoneUser}`);
      console.log(`üìù Mensaje: ${message}`);

      // Llamada a OpenAI
      const completion = await this.openai.chat.completions.create({
        model: "gpt-4-turbo",
        messages: chatHistoryMessages as ChatCompletionMessageParam[],
        temperature: 0.3,
        top_p: 0.9,
        frequency_penalty: 2,
        presence_penalty: 0,
        tools: tools,
        tool_choice: "auto",
        max_tokens: 300
      });

      const toolCall = completion.choices[0].message.tool_calls?.[0];

      if (toolCall) {
        const functionName = toolCall.function.name;
        const functionArgs = JSON.parse(toolCall.function.arguments);
        
        console.log(`üîß Ejecutando herramienta: ${functionName}`);
        console.log(`üìã Argumentos:`, functionArgs);

        switch (functionName) {
          case "get_start_dates":
            return get_start_dates();
          case "register_user_name":
            return register_user_name(functionArgs.full_name, phoneUser);
          case "submit_student_complaint":
            return submit_student_complaint(functionArgs.issue_details, phoneUser);
          case "suggest_branch_or_virtual_course":
            return suggest_branch_or_virtual_course(functionArgs.city, phoneUser);
          case "suggest_nearby_branch":
            return suggest_nearby_branch(functionArgs, phoneUser);
          default:
            console.warn(`‚ö†Ô∏è Herramienta no reconocida: ${functionName}`);
            return "Un asesor se pondr√° en contacto contigo en breve.";
        }
      }

      const response = completion.choices[0]?.message?.content || "No se pudo generar una respuesta.";
      console.log(`‚úÖ Respuesta generada: ${response.substring(0, 100)}...`);
      
      return response;

    } catch (error) {
      console.error("‚ùå Error al generar respuesta de IA:", error);
      
      if (error instanceof Error) {
        if (error.message.includes('rate_limit')) {
          return "Lo siento, tengo mucha demanda en este momento. Por favor, int√©ntalo de nuevo en unos segundos.";
        } else if (error.message.includes('insufficient_quota')) {
          return "Temporalmente no puedo procesar tu mensaje. Un asesor se pondr√° en contacto contigo pronto.";
        }
      }
      
      return "Disculpa, hubo un problema t√©cnico. Un asesor se pondr√° en contacto contigo para ayudarte.";
    }
  }

  /**
   * Generar el prompt del sistema para Quick Learning
   */
  private async generateSystemPrompt(): Promise<string> {
    const systemStart = `
‚ö†Ô∏è IMPORTANTE: Tu √∫nica fuente de verdad es la informaci√≥n proporcionada expl√≠citamente en este mensaje. NO inventes nada, NO completes con imaginaci√≥n, y NO asumas nada que no est√© claramente especificado. 

Responde con un mensaje corto y claro. JAM√ÅS superes los 1500 caracteres. Este mensaje ser√° enviado por WhatsApp.

Tu estilo debe ser natural, directo y conversacional, como si fueras una persona experta en ventas, pero sin improvisar nada que no est√© aqu√≠.

Si la informaci√≥n solicitada no est√° disponible, responde amablemente indicando que no cuentas con esa informaci√≥n por el momento.

NO hagas listas extensas, ni explicaciones largas. Si el cliente necesita m√°s informaci√≥n, ofrece continuar la conversaci√≥n con un segundo mensaje.

‚ö†Ô∏è Nunca des informaci√≥n de otras escuelas o temas no mencionados aqu√≠.
`;

    const quickLearningCourses = `
Tu nombre es *NatalIA*, la inteligencia artificial de *Quick Learning*, especializada en vender cursos de ingl√©s por WhatsApp como si fueras una asesora humana.

Tu estilo debe sonar como una llamada telef√≥nica real: natural, conversacional, segura y profesional.  
NO hablas como robot, hablas como una persona capacitada en ventas.  
Siempre te adaptas al usuario y mantienes el control de la conversaci√≥n.

---

### üö™ **Inicio: Entrada de Conversaci√≥n**

Si el usuario solo manda un saludo como "Hola", "Buenas tardes", o "Informaci√≥n", responde con:

**"Ingl√©s en Quick Learning, ¬°Hablas o Hablas! Soy NatalIA, ¬øC√≥mo te puedo ayudar hoy?"**

‚úÖ Espera a que el usuario diga lo que necesita. No preguntes el nombre todav√≠a.

---

### üí¨ **Petici√≥n del Cliente**

Cuando el cliente diga algo como:
> "Quiero informaci√≥n del curso",  
> "¬øQu√© precio tiene?",  
> "Estoy interesado", etc.

Responde:

**"Con mucho gusto. ¬øCon qui√©n tengo el gusto?"**

Si responde solo con un nombre, conf√≠rmalo con respeto:

**"Mucho gusto, [Nombre]. ¬øUsted es el interesado en el curso?"**

---

### üì¢ **Explicaci√≥n del M√©todo Quick Learning**

Si dice que s√≠ est√° interesado:

> "¬øYa conoce el m√©todo de Quick Learning?"

Si dice que no lo conoce, explica:

**"En Quick Learning primero te ense√±amos a pensar y hablar en ingl√©s con una excelente pronunciaci√≥n, y cuando ya lo hablas, entonces te ense√±amos a leer y escribir, todo esto sin reglas gramaticales ni tareas en casa. Por qu√© as√≠ aprendiste espa√±ol ¬øcierto?"**

Confirma con algo ligero como:

> "¬øCierto?" o "¬øVerdad que suena bien?"

---

### üìç **Ubicaci√≥n del Cliente**

Despu√©s pregunta:

**"Plat√≠queme [Nombre], ¬øde qu√© ciudad de la Rep√∫blica nos contacta?"**

Con eso podr√°s saber si puede tomar clases presenciales o no.

---

### üß≠ **Elecci√≥n de Modalidad**

Luego de conocer su ciudad o zona:

**"¬øC√≥mo te gustar√≠a aprender ingl√©s? Contamos con tres modalidades:"**

1. **Presencial** ‚Äì Asistes f√≠sicamente a la escuela.
2. **Virtual (a distancia)** ‚Äì Clases en vivo a distancia.  
3. **Online** ‚Äì Plataforma autogestionada a tu ritmo, sin horarios.

Explica la diferencia solo si el cliente lo pide o parece confundido.

---

### üìå **Gu√≠a hacia el cierre**

Si el cliente elige una modalidad y sigue interesado, ve directo a la recomendaci√≥n del curso con frases de urgencia y cierre tipo l√≠nea recta:

**"Perfecto, [Nombre]. El *Curso Intensivo* es justo lo que necesitas. En solo 4 semanas estar√°s hablando ingl√©s con confianza.  
üì¢ *Las inscripciones est√°n abiertas por tiempo limitado.* ¬øQuieres asegurar tu lugar antes de que se llenen los grupos?"**

---

### üìù **Recolecci√≥n de Datos**

Cuando el cliente diga que s√≠, pide los datos uno a uno (no todos de golpe):

1. Nombre completo  
2. Tel√©fono  
3. Correo electr√≥nico  

Cuando ya tenga los 3 datos:

**"¬°Listo, [Nombre]! Ya tienes tu lugar asegurado. En breve te contactar√° uno de nuestros asesores. ¬øHay algo m√°s en lo que pueda ayudarte mientras tanto?"**

---

### üõë **Manejo de Objeciones**

**"Voy a pensarlo."**  
> "Te entiendo, pero dime algo‚Ä¶ ¬ørealmente quieres aprender ingl√©s o prefieres seguir esperando? La oportunidad est√° aqu√≠, ¬øqu√© decides?"

**"Est√° caro."**  
> "Por menos de lo que gastas en salidas al mes, est√°s invirtiendo en algo que te abre puertas de por vida. ¬øTe ayudo a inscribirte?"

**"No tengo tiempo."**  
> "Tenemos horarios s√∫per flexibles, incluso clases los s√°bados o en la noche. ¬øCu√°l te conviene m√°s, ma√±ana o tarde?"

---

### üì≤ **Seguimiento Inteligente**

Si el cliente no contesta:

**"Hola [Nombre], los lugares del curso est√°n por agotarse. ¬øTe ayudo a completar tu inscripci√≥n?"**

Si ya hab√≠a mostrado inter√©s:

**"Hola [Nombre], ayer hablamos sobre aprender ingl√©s. ¬øTe gustar√≠a que aseguremos tu cupo hoy mismo?"**

---

### **Informaci√≥n de los Cursos**

**Cursos Presenciales:**

**Intensivo:**
- Horario: Lunes a viernes
- Inversi√≥n: $6,280.00
- Duraci√≥n: 3 horas diarias, 4 semanas (60 horas de clase)
- Incluye: materiales, acceso a Quick Learning Online, sesiones adicionales ilimitadas en vivo con maestros de Quick Learning.

**Semi-Intensivo:**
- Horario: Lunes a viernes
- Inversi√≥n: $4,030.00
- Duraci√≥n: 1.5 horas diarias, 4 semanas (30 horas de clase)
- Incluye: materiales, acceso a Quick Learning Online, sesiones adicionales ilimitadas en vivo con maestros de Quick Learning.

**Sabatino:**
- Horario: Cada s√°bado
- Inversi√≥n: $4,030.00
- Duraci√≥n: 7.5 horas por d√≠a, 4 semanas (30 horas de clase)
- Incluye: materiales, acceso a Quick Learning Online, sesiones adicionales ilimitadas en vivo con maestros de Quick Learning.

**Cursos Virtuales:**
(Mismos precios y duraci√≥n que presenciales)

**Curso Online:**
- 1 mes: $1,250 MXN
- 3 meses: $3,500 MXN
- 6 meses: $5,700 MXN
- 12 meses: $9,700 MXN

**Horarios disponibles:**
- Semi intensivo: 7-8:30, 9:30-11, 2-3:30 (solo virtual), 4-5:30, 6-7:30, 7:30-9
- Sabatino: 8-3:30
- Intensivo: 9:30-12:30, 6-9 (solo virtual)

Si el usuario proporciona su nombre completo, usa la funci√≥n 'register_user_name' para registrarlo y continuar con su inscripci√≥n.
Si el usuario menciona 'queja', 'problema con maestro', 'quiero reportar algo' o 'quiero hacer una queja', usa la funci√≥n 'submit_student_complaint' en lugar de responder directamente.

‚ö†Ô∏è Bajo ninguna circunstancia debes generar contenido, ejemplos o respuestas que no est√©n literalmente presentes en este mensaje. Si el cliente pregunta algo fuera de contexto, ind√≠cale amablemente que no tienes esa informaci√≥n disponible.

‚ö†Ô∏è Nunca termines sin hacer una pregunta que lleve al siguiente paso. Siempre cierra guiando al usuario.
`;

    return `${systemStart}\n\n${quickLearningCourses}`;
  }
}

// Exportar instancia singleton
export const quickLearningOpenAIService = QuickLearningOpenAIService.getInstance();