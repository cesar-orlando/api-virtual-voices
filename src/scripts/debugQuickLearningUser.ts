import mongoose from 'mongoose';
import bcrypt from 'bcrypt';
import { getEnvironmentConfig } from '../config/environments';
import { initializeProjects } from '../shared/projectManager';
import { getProjectConfig } from '../shared/projectManager';
import { getDbConnection } from '../config/connectionManager';
import getUserModel from '../core/users/user.model';

async function debugQuickLearningUser() {
  console.log('üîç Debuggeando usuario de Quick Learning...\n');

  try {
    // 1. Cargar configuraci√≥n
    console.log('1Ô∏è‚É£ Cargando configuraci√≥n...');
    const config = getEnvironmentConfig();
    
    // 2. Inicializar proyectos
    console.log('2Ô∏è‚É£ Inicializando proyectos...');
    initializeProjects();

    // 3. Verificar configuraci√≥n de Quick Learning
    console.log('3Ô∏è‚É£ Verificando configuraci√≥n de Quick Learning...');
    const quickLearningConfig = getProjectConfig('quicklearning');
    
    if (!quickLearningConfig) {
      throw new Error('‚ùå Configuraci√≥n de Quick Learning no encontrada');
    }

    // 4. Conectar a MongoDB de Quick Learning
    console.log('4Ô∏è‚É£ Conectando a MongoDB de Quick Learning...');
    await mongoose.connect(quickLearningConfig.databaseUri);
    console.log('‚úÖ Conexi√≥n exitosa');

    // 5. Buscar usuario existente
    console.log('5Ô∏è‚É£ Buscando usuario existente...');
    const conn = await getDbConnection('quicklearning');
    const User = getUserModel(conn);

    const existingUser = await User.findOne({ email: 'admin@quicklearning.com' });
    if (!existingUser) {
      console.log('‚ùå Usuario admin@quicklearning.com no encontrado');
      return;
    }

    console.log('‚úÖ Usuario encontrado:');
    console.log('   - ID:', existingUser._id);
    console.log('   - Name:', existingUser.name);
    console.log('   - Email:', existingUser.email);
    console.log('   - Role:', existingUser.role);
    console.log('   - Company Slug:', existingUser.companySlug);
    console.log('   - Status:', existingUser.status);
    console.log('   - Created At:', existingUser.createdAt);
    console.log('   - Password Hash:', existingUser.password.substring(0, 20) + '...');

    // 6. Probar contrase√±as
    console.log('\n6Ô∏è‚É£ Probando contrase√±as...');
    
    const testPasswords = [
      'QuickLearning2024!',
      'QuickLearning2024',
      'password123',
      'admin123',
      '1234567890'
    ];

    for (const password of testPasswords) {
      const isMatch = await bcrypt.compare(password, existingUser.password);
      console.log(`   "${password}": ${isMatch ? '‚úÖ MATCH' : '‚ùå NO MATCH'}`);
    }

    // 7. Crear nueva contrase√±a si es necesario
    console.log('\n7Ô∏è‚É£ Actualizando contrase√±a...');
    const newPassword = 'QuickLearning2024!';
    const saltRound = 10;
    const newHashedPassword = await bcrypt.hash(newPassword, saltRound);
    
    existingUser.password = newHashedPassword;
    await existingUser.save();
    
    console.log('‚úÖ Contrase√±a actualizada a:', newPassword);

    // 8. Verificar que funciona
    console.log('\n8Ô∏è‚É£ Verificando nueva contrase√±a...');
    const isMatch = await bcrypt.compare(newPassword, existingUser.password);
    console.log(`   Nueva contrase√±a funciona: ${isMatch ? '‚úÖ S√ç' : '‚ùå NO'}`);

    console.log('\nüéâ ¬°Debug completado!');
    console.log('\nüìã Credenciales actualizadas:');
    console.log('   Email: admin@quicklearning.com');
    console.log('   Password: QuickLearning2024!');
    console.log('   Role: admin');
    console.log('   Company: quicklearning');

  } catch (error) {
    console.error('\n‚ùå Error durante debug:', error);
    process.exit(1);
  } finally {
    // Cerrar conexi√≥n
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('\nüîå Conexi√≥n cerrada');
    }
    process.exit(0);
  }
}

// Ejecutar script
debugQuickLearningUser(); 