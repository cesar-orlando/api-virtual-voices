import dotenv from "dotenv";
import { twilioService } from "../services/twilio/twilioService";
import { quickLearningOpenAIService } from "../services/quicklearning/openaiService";
import { getDbConnection } from "../config/connectionManager";
import getQuickLearningChatModel from "../models/quicklearning/chat.model";
import getRecordModel from "../models/record.model";

// Cargar variables de entorno
dotenv.config();

// N√∫mero de prueba proporcionado
const TEST_PHONE = "+5214521311888";

async function testTwilioQuickLearning() {
  console.log("üöÄ Iniciando pruebas de Twilio - Quick Learning");
  console.log("=" .repeat(50));

  try {
    // Test 1: Verificar estado del servicio
    console.log("\nüìä Test 1: Verificando estado del servicio Twilio...");
    const status = await twilioService.checkServiceStatus();
    console.log("‚úÖ Estado del servicio:", status);

    // Test 2: Verificar conexi√≥n a la base de datos
    console.log("\nüíæ Test 2: Verificando conexi√≥n a la base de datos...");
    const conn = await getDbConnection('quicklearning');
    console.log("‚úÖ Conexi√≥n a Quick Learning DB establecida");

    // Test 3: Verificar modelos de base de datos
    console.log("\nüóÉÔ∏è Test 3: Verificando modelos de base de datos...");
    const QuickLearningChat = getQuickLearningChatModel(conn);
    const DynamicRecord = getRecordModel(conn);
    console.log("‚úÖ Modelos cargados correctamente");

    // Test 4: Crear/verificar cliente de prueba
    console.log("\nüë§ Test 4: Creando cliente de prueba...");
    let customer = await DynamicRecord.findOne({
      tableSlug: "prospectos",
      "data.phone": TEST_PHONE,
    });

    if (!customer) {
      customer = new DynamicRecord({
        tableSlug: "prospectos",
        c_name: "quicklearning",
        createdBy: "test-script",
        data: {
          phone: TEST_PHONE,
          name: "Usuario de Prueba",
          status: "Test",
          classification: "Prospecto",
          ai: true,
          createdAt: new Date(),
        },
      });
      await customer.save();
      console.log("‚úÖ Nuevo cliente de prueba creado");
    } else {
      console.log("‚úÖ Cliente de prueba ya existe");
    }

    // Test 5: Crear/verificar chat de prueba
    console.log("\nüí¨ Test 5: Verificando chat de prueba...");
    let chat = await QuickLearningChat.findOne({ phone: TEST_PHONE });
    if (!chat) {
      chat = new QuickLearningChat({
        phone: TEST_PHONE,
        profileName: "Usuario de Prueba",
        linkedTable: {
          refModel: "Record",
          refId: customer._id,
        },
        conversationStart: new Date(),
        aiEnabled: true,
        messages: [],
      });
      await chat.save();
      console.log("‚úÖ Nuevo chat de prueba creado");
    } else {
      console.log("‚úÖ Chat de prueba ya existe");
    }

    // Test 6: Probar respuesta de IA
    console.log("\nü§ñ Test 6: Probando respuesta de IA...");
    const testMessage = "Hola, quiero informaci√≥n sobre los cursos de ingl√©s";
    const aiResponse = await quickLearningOpenAIService.generateResponse(testMessage, TEST_PHONE);
    console.log("‚úÖ Respuesta de IA generada:");
    console.log(`   Mensaje: ${testMessage}`);
    console.log(`   Respuesta: ${aiResponse.substring(0, 100)}...`);

    // Test 7: Enviar mensaje de prueba
    console.log("\nüì± Test 7: Enviando mensaje de prueba...");
    const testMessageBody = `üß™ **MENSAJE DE PRUEBA** üß™

Hola! Este es un mensaje de prueba del sistema de Twilio integrado con Quick Learning.

‚úÖ Servicios verificados:
- Conexi√≥n a Twilio
- Base de datos Quick Learning  
- Sistema de IA (NatalIA)
- Webhooks configurados

Tu n√∫mero est√° listo para recibir mensajes autom√°ticos de Quick Learning.

¬°El sistema est√° funcionando correctamente! üéâ

---
Enviado: ${new Date().toLocaleString('es-MX')}`;

    const result = await twilioService.sendMessage({
      to: TEST_PHONE,
      body: testMessageBody,
    });

    if (result.success) {
      console.log("‚úÖ Mensaje enviado exitosamente");
      console.log(`   ID del mensaje: ${result.messageId}`);
      
      // Guardar el mensaje en el chat
      chat.messages.push({
        direction: "outbound-api",
        body: testMessageBody,
        respondedBy: "bot",
        twilioSid: result.messageId,
        messageType: "text",
      });
      
      chat.lastMessage = {
        body: testMessageBody,
        date: new Date(),
        respondedBy: "bot",
      };
      
      await chat.save();
      console.log("‚úÖ Mensaje guardado en la base de datos");
    } else {
      console.error("‚ùå Error enviando mensaje:", result.error);
    }

    // Test 8: Verificar historial de mensajes
    console.log("\nüìú Test 8: Verificando historial de mensajes...");
    const history = await twilioService.getMessageHistory(5);
    console.log(`‚úÖ √öltimos ${history.length} mensajes obtenidos`);
    
    // Test 9: Enviar segundo mensaje de informaci√≥n
    console.log("\nüìã Test 9: Enviando mensaje informativo...");
    const infoMessage = `üìã **INFORMACI√ìN DEL SISTEMA**

üè¢ **Quick Learning - Twilio Integration**
üîó Webhook: /api/quicklearning/twilio/webhook
üìû N√∫mero: ${process.env.TWILIO_PHONE_NUMBER}
ü§ñ IA: NatalIA activada
üíæ Base de datos: Conectada

**Endpoints disponibles:**
‚Ä¢ POST /send - Enviar mensaje
‚Ä¢ POST /send-template - Enviar plantilla  
‚Ä¢ GET /status - Estado del servicio
‚Ä¢ GET /history - Historial de mensajes

**Para probar:**
Env√≠a cualquier mensaje a este n√∫mero y recibir√°s una respuesta autom√°tica de NatalIA.

¬°Todo listo para producci√≥n! ‚ú®`;

    const infoResult = await twilioService.sendMessage({
      to: TEST_PHONE,
      body: infoMessage,
    });

    if (infoResult.success) {
      console.log("‚úÖ Mensaje informativo enviado");
    }

    console.log("\nüéâ ¬°TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE!");
    console.log("=" .repeat(50));
    console.log("üì± Tu n√∫mero est√° listo para recibir mensajes autom√°ticos");
    console.log("ü§ñ NatalIA responder√° autom√°ticamente a tus mensajes");
    console.log("üîó Webhook configurado en: /api/quicklearning/twilio/webhook");
    console.log("üìö Documentaci√≥n disponible en: /api/docs");

  } catch (error) {
    console.error("\n‚ùå Error en las pruebas:", error);
    process.exit(1);
  }
}

// Ejecutar las pruebas
if (require.main === module) {
  testTwilioQuickLearning()
    .then(() => {
      console.log("\n‚úÖ Script completado exitosamente");
      process.exit(0);
    })
    .catch((error) => {
      console.error("\n‚ùå Error ejecutando script:", error);
      process.exit(1);
    });
}

export default testTwilioQuickLearning;