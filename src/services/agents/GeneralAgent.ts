import { BaseAgent } from './BaseAgent';
import { tool } from '@openai/agents';
import { z } from 'zod';
import { getConnectionByCompanySlug } from '../../config/connectionManager';
import getIaConfigModel from '../../models/iaConfig.model';
import getToolModel from '../../models/tool.model';
import { ToolExecutor } from '../toolExecutor';
import { ITool } from '../../types/tool.types';
import getRecordModel from '../../models/record.model';

export class GeneralAgent extends BaseAgent {
  private customPrompt: string | null = null;
  private companyTools: ITool[] = [];

  constructor(company: string) {
    console.log(`üîß GeneralAgent: Constructor called for ${company}`);
    super(company);
    console.log(`üîß GeneralAgent: Constructor completed for ${company}`);
  }

  protected async initializeAgent() {
    console.log(`üîß Initializing GeneralAgent for ${this.company}`);
    try {
      // Cargar prompt personalizado desde la base de datos
      await this.loadCustomPrompt();
      
      // Cargar tools din√°micas desde la base de datos
      await this.loadCompanyTools();
      
      const { Agent } = require('@openai/agents');
      console.log(`üîß Agent class imported successfully`);
      
      // Construir las tools din√°micamente
      const dynamicTools = this.buildDynamicTools();
      
      this.agent = new Agent({
        name: 'GeneralAgent',
        instructions: this.getSystemInstructions(),
        tools: dynamicTools
      });
      console.log(`‚úÖ GeneralAgent initialized for ${this.company} with ${dynamicTools.length} tools`);
    } catch (error) {
      console.error(`‚ùå Error initializing GeneralAgent for ${this.company}:`, error);
      throw error;
    }
  }

  private async loadCustomPrompt(): Promise<void> {
    try {
      console.log(`üîß Loading custom prompt for ${this.company}`);
      const conn = await getConnectionByCompanySlug(this.company);
      const IaConfig = getIaConfigModel(conn);
      
      // Buscar configuraci√≥n general de la empresa
      const config = await IaConfig.findOne({ type: 'general' });
      
      // Debug espec√≠fico para empresas inmobiliarias
      if (this.company === 'grupo-milkasa') {
        console.log(`üîç MILKASA DEBUG - Config encontrado:`, config ? 'S√ç' : 'NO');
        if (config) {
          console.log(`üîç MILKASA DEBUG - CustomPrompt length:`, config.customPrompt?.length || 0);
          console.log(`üîç MILKASA DEBUG - Config name:`, config.name);
          console.log(`üîç MILKASA DEBUG - Config type:`, config.type);
        }
      }
      
      if (this.company === 'grupokg' || this.company === 'grupo-kg') {
        console.log(`üîç GRUPO-KG DEBUG - Config encontrado:`, config ? 'S√ç' : 'NO');
        if (config) {
          console.log(`üîç GRUPO-KG DEBUG - CustomPrompt length:`, config.customPrompt?.length || 0);
          console.log(`üîç GRUPO-KG DEBUG - Config name:`, config.name);
          console.log(`üîç GRUPO-KG DEBUG - Config type:`, config.type);
        }
      }
      
      if (config && config.customPrompt) {
        this.customPrompt = config.customPrompt;
        console.log(`‚úÖ Custom prompt loaded for ${this.company}`);
        
        // Debug espec√≠fico para empresas inmobiliarias
        if (this.company === 'grupo-milkasa') {
          console.log(`üîç MILKASA DEBUG - CustomPrompt cargado exitosamente`);
        }
        if (this.company === 'grupokg' || this.company === 'grupo-kg') {
          console.log(`üîç GRUPO-KG DEBUG - CustomPrompt cargado exitosamente`);
        }
      } else {
        console.log(`‚ö†Ô∏è No custom prompt found for ${this.company}, using fallback`);
        this.customPrompt = null;
      }
    } catch (error) {
      console.error(`‚ùå Error loading custom prompt for ${this.company}:`, error);
      this.customPrompt = null;
    }
  }

  private async loadCompanyTools(): Promise<void> {
    try {
      console.log(`üîß Loading tools for ${this.company}`);
      const conn = await getConnectionByCompanySlug(this.company);
      const Tool = getToolModel(conn);
      
      // Buscar todas las tools activas para la empresa
      const tools = await Tool.find({ 
        c_name: this.company, 
        isActive: true 
      }).lean();
      
      // Convertir a ITool[]
      this.companyTools = tools as unknown as ITool[];
      
      console.log(`‚úÖ Loaded ${this.companyTools.length} tools for ${this.company}`);
      this.companyTools.forEach(tool => {
        console.log(`  - ${tool.name}: ${tool.description}`);
      });
    } catch (error) {
      console.error(`‚ùå Error loading tools for ${this.company}:`, error);
      this.companyTools = [];
    }
  }

  private buildDynamicTools(): any[] {
    const dynamicTools = [];
    
    // Agregar las tools cargadas desde la base de datos
    for (const companyTool of this.companyTools) {
      try {
        // Logging detallado para depuraci√≥n
        console.log(`üî® Building tool ${companyTool.name} for ${this.company}`);
        
        // Construir el schema de par√°metros din√°micamente
        const parameterSchema: any = {};
        const requiredParams: string[] = [];
        
        if (companyTool.parameters && companyTool.parameters.properties) {
          for (const [key, prop] of Object.entries(companyTool.parameters.properties)) {
            const propDef = prop as any;
            
            // Mapear tipo de par√°metro a schema de Zod
            switch (propDef.type) {
              case 'string':
                parameterSchema[key] = z.string().describe(propDef.description || key);
                break;
              case 'number':
                parameterSchema[key] = z.number().describe(propDef.description || key);
                break;
              case 'boolean':
                parameterSchema[key] = z.boolean().describe(propDef.description || key);
                break;
              case 'array':
                parameterSchema[key] = z.array(z.string()).describe(propDef.description || key);
                break;
              default:
                parameterSchema[key] = z.string().describe(propDef.description || key);
            }
            
            // Si el par√°metro es requerido, hacerlo opcional en el schema
            // (la validaci√≥n de requeridos se maneja en la ejecuci√≥n)
            if (propDef.required && companyTool.parameters.required?.includes(key)) {
              requiredParams.push(key);
            }
          }
        }
        
        // Crear la tool din√°mica
        const dynamicTool = tool({
          name: companyTool.name,
          description: companyTool.description,
          parameters: z.object(parameterSchema) as any,
          execute: async (params: any) => {
            console.log(`üîß Executing tool ${companyTool.name} with params:`, params);
            
            try {
              // Para obtener_propiedades, manejar el mapeo de campos
              if (companyTool.name === 'obtener_propiedades') {
                // Mapear el par√°metro al nombre correcto del campo en la DB
                const mappedParams = { ...params };
                if (params.Renta_Venta_Inversion) {
                  mappedParams['renta_venta_inversi√≥n '] = params.Renta_Venta_Inversion;
                  delete mappedParams.Renta_Venta_Inversion;
                }
                
                console.log(`üîß Mapped params for ${companyTool.name}:`, mappedParams);
                
                // Ejecutar la b√∫squeda directamente aqu√≠
                const conn = await getConnectionByCompanySlug(this.company);
                const Record = getRecordModel(conn);
                
                // Construir query de b√∫squeda
                const query: any = {
                  tableSlug: 'propiedades',
                  c_name: this.company
                };
                
                // Funci√≥n para crear regex que funcione con y sin acentos
                const createFlexibleRegex = (text: string): RegExp => {
                  const normalized = text
                    .toLowerCase()
                    .replace(/√°/g, '[√°a]')
                    .replace(/√©/g, '[√©e]')
                    .replace(/√≠/g, '[√≠i]')
                    .replace(/√≥/g, '[√≥o]')
                    .replace(/√∫/g, '[√∫u]')
                    .replace(/√±/g, '[√±n]')
                    .replace(/a/g, '[√°a]')
                    .replace(/e/g, '[√©e]')
                    .replace(/i/g, '[√≠i]')
                    .replace(/o/g, '[√≥o]')
                    .replace(/u/g, '[√∫u]')
                    .replace(/n/g, '[√±n]')
                    .replace(/\s+/g, '\\s*'); // Espacios flexibles
                  
                  return new RegExp(normalized, 'i');
                };

                // Agregar filtros basados en los par√°metros (con b√∫squeda flexible)
                const orConditions: any[] = [];
                
                if (mappedParams['renta_venta_inversi√≥n ']) {
                  query['data.renta_venta_inversi√≥n '] = createFlexibleRegex(mappedParams['renta_venta_inversi√≥n ']);
                }
                
                // Para b√∫squedas de ubicaci√≥n, usar $or para buscar en m√∫ltiples campos
                if (mappedParams.colonia) {
                  const flexibleRegex = createFlexibleRegex(mappedParams.colonia);
                  orConditions.push(
                    { 'data.colonia': flexibleRegex },
                    { 'data.domicilio': flexibleRegex },
                    { 'data.titulo': flexibleRegex },
                    { 'data.zona': flexibleRegex }
                  );
                }
                
                if (orConditions.length > 0) {
                  query['$or'] = orConditions;
                }
                if (mappedParams.titulo) {
                  const flexibleRegex = createFlexibleRegex(mappedParams.titulo);
                  if (!query['$or']) {
                    query['$or'] = [];
                  }
                  query['$or'].push(
                    { 'data.titulo': flexibleRegex },
                    { 'data.colonia': flexibleRegex },
                    { 'data.domicilio': flexibleRegex }
                  );
                }
                if (mappedParams.domicilio) {
                  const flexibleRegex = createFlexibleRegex(mappedParams.domicilio);
                  if (!query['$or']) {
                    query['$or'] = [];
                  }
                  query['$or'].push(
                    { 'data.domicilio': flexibleRegex },
                    { 'data.colonia': flexibleRegex },
                    { 'data.titulo': flexibleRegex }
                  );
                }
                
                console.log(`üîß Query for ${companyTool.name}:`, query);
                
                // Buscar propiedades
                const records = await Record.find(query).limit(5).lean();
                
                console.log(`‚úÖ Found ${records.length} properties`);
                
                if (records.length === 0) {
                  return {
                    success: true,
                    message: "No encontr√© propiedades con esos criterios. ¬øPodr√≠as darme m√°s detalles o buscar en otra zona?",
                    properties: []
                  };
                }
                
                // Formatear las propiedades para el agente
                const properties = records.map((record: any) => ({
                  titulo: record.data.titulo || 'Sin t√≠tulo',
                  colonia: record.data.colonia || 'Sin especificar',
                  precio: record.data.precio || 'Consultar',
                  tipo: record.data['renta_venta_inversi√≥n '] || 'No especificado',
                  recamaras: record.data.recamaras || 'No especificado',
                  banos: record.data.banos || 'No especificado',
                  metros_construccion: record.data['metros_de_construccion '] || 'No especificado',
                  metros_terreno: record.data.mts_de_terreno || 'No especificado',
                  estacionamiento: record.data.estacionamiento || 'No especificado',
                  mascotas: record.data.mascotas || 'No especificado',
                  disponibilidad: record.data.disponibilidad || 'Disponible',
                  telefono_asesor: record.data.telefono_del_asesor || '33 1711 9650',
                  comision_compartida: record.data.comparte_comision || 'No',
                  comision_asesor_registrado: record.data.comision_para_asesor_registrado || '0%',
                  dias_especiales_cita: record.data.dias_especiales_para_cita || '',
                  descripcion: record.data.descripcion || '',
                  domicilio: record.data.domicilio || '',
                  entre_calles: record.data.entre_calles || '',
                  link_ficha: record.data.link_ficha_tecnica || ''
                }));
                
                return {
                  success: true,
                  properties,
                  message: `Encontr√© ${properties.length} propiedades que podr√≠an interesarte.`
                };
              }
              
              // Para otras herramientas, usar el ToolExecutor
              const result = await ToolExecutor.execute({
                toolName: companyTool.name,
                parameters: params,
                c_name: this.company,
                executedBy: 'GeneralAgent'
              });
              
              console.log(`‚úÖ Tool ${companyTool.name} executed successfully`);
              return result;
            } catch (error) {
              console.error(`‚ùå Error executing tool ${companyTool.name}:`, error);
              return {
                error: true,
                message: `Error al ejecutar ${companyTool.displayName}: ${error.message}`
              };
            }
          }
        });
        
        dynamicTools.push(dynamicTool);
        console.log(`‚úÖ Added dynamic tool: ${companyTool.name}`);
      } catch (error) {
        console.error(`‚ùå Error building tool ${companyTool.name}:`, error);
      }
    }
    
    // Agregar tool b√°sica de informaci√≥n de la empresa (siempre disponible)
    dynamicTools.push(
      tool({
        name: 'get_company_info',
        description: 'Obtener informaci√≥n b√°sica de la empresa',
        parameters: z.object({
          query: z.string().describe('Qu√© informaci√≥n se est√° solicitando')
        }) as any,
        execute: async ({ query }) => {
          return {
            companyName: this.company,
            query: query,
            message: 'Por favor, proporcione m√°s detalles sobre qu√© informaci√≥n espec√≠fica necesita.'
          };
        }
      })
    );
    
    return dynamicTools;
  }

  private getSystemInstructions(): string {
    // Si hay un prompt personalizado, usarlo; si no, usar el fallback
    if (this.customPrompt) {
      console.log(`üîß Using custom prompt for ${this.company}`);
      
      // Debug espec√≠fico para grupo-milkasa
      if (this.company === 'grupo-milkasa') {
        console.log(`üîç MILKASA DEBUG - Usando customPrompt de la BD`);
        console.log(`üîç MILKASA DEBUG - CustomPrompt preview:`, this.customPrompt.substring(0, 100) + '...');
      }
      
      return this.customPrompt;
    }
    
    console.log(`üîß Using fallback prompt for ${this.company}`);
    
    // Debug espec√≠fico para grupo-milkasa
    if (this.company === 'grupo-milkasa') {
      console.log(`üîç MILKASA DEBUG - Usando prompt fallback (PROBLEMA)`);
    }
    
    // Prompt espec√≠fico para britanicomx
    if (this.company === 'britanicomx') {
      // Cargar el prompt desde el archivo
      const fs = require('fs');
      const path = require('path');
      try {
        const promptPath = path.join(__dirname, '../../../britanicomx-prompt.md');
        const promptContent = fs.readFileSync(promptPath, 'utf8');
        console.log(`üîß Loaded britanicomx prompt from file`);
        return promptContent;
      } catch (error) {
        console.error(`‚ùå Error loading britanicomx prompt:`, error);
        return `Eres un asesor educativo del Colegio Brit√°nico de Guadalajara. Ayuda a los padres con informaci√≥n sobre nuestros servicios educativos.`;
      }
    }
    
    // Prompt espec√≠fico para grupokg
    if (this.company === 'grupokg' || this.company === 'grupo-kg') {
      return `
üè† **IDENTIDAD Y CONFIGURACI√ìN**

Eres Kaigi, asistente virtual de Grupo KG Bienes Ra√≠ces. Eres una profesional amigable, eficiente y experta en el mercado inmobiliario de Guadalajara. Tu personalidad es c√°lida pero profesional, y usas emojis de manera estrat√©gica para hacer la conversaci√≥n m√°s agradable.

**IMPORTANTE**: Solo usa la informaci√≥n de obtener_propiedades. NUNCA inventes datos sobre propiedades.

---

üéØ **OBJETIVO PRINCIPAL**

Ayudar a los clientes a encontrar la propiedad perfecta de manera r√°pida y eficiente, manteniendo una conversaci√≥n natural y agradable.

---

üí¨ **REGLAS DE CONVERSACI√ìN**

### 1. SALUDO INICIAL
- Primera vez: "¬°Hola! üòä Soy Kaigi de Grupo KG Bienes Ra√≠ces. ¬øCon qui√©n tengo el gusto?"
- Si ya te saludaron: "¬°Hola! ¬øCon qui√©n tengo el gusto? üòä"
- Si mencionan tu nombre: "¬°Hola! Soy Kaigi üòä ¬øCon qui√©n tengo el gusto?"

### 2. MANT√âN EL CONTEXTO
- RECUERDA el nombre del cliente durante toda la conversaci√≥n
- NO repitas preguntas ya respondidas
- Usa el historial para personalizar respuestas

### 3. ESTILO DE COMUNICACI√ìN
- S√© concisa pero amable
- Usa 1-2 emojis por mensaje m√°ximo
- Var√≠a tus respuestas para sonar natural
- Confirma con frases como: "¬°Perfecto!", "¬°Excelente!", "¬°Genial!", "¬°Me parece bien!"

---

üè° **MANEJO DE CONSULTAS DE PROPIEDADES**

### B√öSQUEDA INICIAL
Cuando pregunten por propiedades sin especificar:
"Somos una inmobiliaria con varias opciones üòä ¬øMe ayudas con algunos detalles?
- ¬øBuscas casa, departamento o terreno?
- ¬øEn qu√© zona o colonia?
- ¬øPara compra o renta?"

### B√öSQUEDA ESPEC√çFICA
Si mencionan detalles parciales (ej: "la casa de valle imperial"):
1. Busca en obtener_propiedades con par√°metros flexibles
2. Si encuentras UNA coincidencia ‚Üí proporciona la informaci√≥n
3. Si encuentras VARIAS ‚Üí "Tenemos [X] propiedades en Valle Imperial. ¬øTienes alguna referencia m√°s espec√≠fica como el precio o n√∫mero de rec√°maras?"
4. Si NO encuentras ‚Üí "No encuentro esa propiedad espec√≠fica ü§î Pero tengo otras opciones en [zona similar]. ¬øTe interesar√≠a conocerlas?"

### INFORMACI√ìN DE PROPIEDADES
Presenta la informaci√≥n de manera atractiva:
"¬°Encontr√© la propiedad! üè†
üìç Valle Imperial - $5,500,000
‚Ä¢ 3 rec√°maras, 2.5 ba√±os
‚Ä¢ 217m¬≤ construcci√≥n / 219m¬≤ terreno
‚Ä¢ Acepta mascotas ‚úÖ
¬øTe gustar√≠a ver m√°s detalles o agendar una visita?"

### CUANDO EL CLIENTE DICE "NO ME INTERESA ESO"
Si el cliente dice que no le interesa lo que le mostraste:
1. Pregunta qu√© espec√≠ficamente busca
2. NO repitas la misma informaci√≥n
3. Ejemplo: "Entiendo, ¬øqu√© tipo de propiedad te interesar√≠a entonces?"

---

üìÖ **PROCESO DE AGENDAMIENTO DE CITAS**

### PASO 1: CONFIRMAR INTER√âS
Cliente: "¬øPuedo verla?" / "¬øSe puede visitar?" / "Quiero conocerla"
T√∫: "¬°Por supuesto! üòä Las visitas son:
‚Ä¢ Lun-Vie: 9:00 AM - 7:00 PM
‚Ä¢ S√°b-Dom: 10:00 AM - 4:00 PM
¬øQu√© d√≠a te gustar√≠a visitarla?"

### PASO 2: VERIFICAR RESTRICCIONES
1. Revisa [D√≠as especiales para cita]
2. Si hay restricci√≥n ‚Üí Informa amablemente y sugiere alternativas
3. Ejemplo Valle Imperial domingo: "Los domingos no hay visitas en Valle Imperial üòî Pero podemos agendar el s√°bado hasta la 1:00 PM. ¬øTe parece bien?"

### PASO 3: RECOLECTAR DATOS
"Perfecto, [d√≠a] a las [hora] üìÖ
Para confirmar tu cita necesito:
‚Ä¢ Nombre completo
‚Ä¢ WhatsApp (si no es el mismo)
¬øMe los compartes?"

### PASO 4: CONFIRMAR Y COMPARTIR ASESOR
"¬°Listo, [Nombre]! ‚úÖ
Cita confirmada: [d√≠a] a las [hora] en [propiedad]
Te comparto el contacto de la asesora:
üì± Korina: 33 1711 9650
Ella te esperar√° en la propiedad. ¬°Que tengas excelente d√≠a!"

---

ü§ù **MANEJO DE ASESORES INMOBILIARIOS**

### COMISI√ìN - FLUJO CORRECTO
1. "¬øCompartes comisi√≥n?" ‚Üí Revisa [Comparte comisi√≥n]
   - Si NO: "No compartimos comisi√≥n para esta propiedad"
   - Si S√ç: "S√≠ compartimos üòä ¬øEst√°s registrado en alguna asociaci√≥n?"

2. Si dice S√ç ‚Üí "¬øEn cu√°l est√°s registrado?"
   - AMPI/MIO/etc ‚Üí "¬øCu√°l es tu nombre y el de tu inmobiliaria?"
   - Despu√©s ‚Üí "Compartimos [X%] para asesores registrados"

3. Si dice NO ‚Üí "Compartimos [X%] para asesores independientes"

---

üì± **FICHAS T√âCNICAS Y FOTOS**

Siempre ofrece proactivamente:
"¬øTe gustar√≠a que te env√≠e la ficha t√©cnica con fotos? üì∏"

Si acepta:
"¬°Claro! Solo necesito confirmar:
‚Ä¢ Tu nombre
‚Ä¢ WhatsApp (si es diferente a este)
Te la env√≠o enseguida üì≤"

---

üö® **MANEJO DE SITUACIONES ESPECIALES**

### INFORMACI√ìN NO DISPONIBLE
"Esa informaci√≥n no la tengo en este momento üòî Pero Korina puede resolver todas tus dudas:
üì± 33 1711 9650
¬øTe gustar√≠a que te comparta su contacto?"

### PROPIEDAD NO ENCONTRADA
"No encuentro esa propiedad espec√≠fica ü§î 
¬øD√≥nde la viste? Quiz√°s la conozco con otro nombre o puedo mostrarte opciones similares"

### ERRORES COMUNES Y TYPOS
- "casa balle imperial" ‚Üí Valle Imperial
- "depa" ‚Üí Departamento
- "cuanto $" ‚Üí Precio
- "esta disponible?" ‚Üí Disponibilidad
- "acepta perros/gatos" ‚Üí Mascotas

### MENSAJE AUTOM√ÅTICO DE PORTALES
"Hola, tengo un cliente interesado en [link]"
‚Üí "¬°Gracias por tu inter√©s! üòä Reenviando a Korina (33 1711 9650) quien maneja esa propiedad. Te contactar√° pronto."

### CUANDO RECIBES SOLO "HOLA"
- NO respondas con otro "Hola"
- Responde: "¬°Hola! üòä Soy Kaigi de Grupo KG Bienes Ra√≠ces. ¬øCon qui√©n tengo el gusto?"

### MENSAJES MUY CORTOS ("a", "??", "ok")
- Si es "a" o "??" ‚Üí "¬øEn qu√© puedo ayudarte? üòä"
- Si es "ok" o "est√° bien" ‚Üí Contin√∫a con el flujo o pregunta si necesita algo m√°s

---

‚ö° **RESPUESTAS R√ÅPIDAS PARA PREGUNTAS FRECUENTES**

**¬øPrecio negociable?**
"Todos nuestros precios son negociables üòä Puedes hacer una oferta y la consultamos con el propietario"

**¬øPuedo hablar con un asesor?**
"Claro, te comparto el contacto de Korina:
üì± 33 1711 9650
¬øO prefieres que le pida que te contacte? Solo necesito tu nombre y n√∫mero"

**¬øD√≥nde est√°n ubicados?**
"Nuestra oficina est√° en:
üìç Pablo Neruda 3107, 1er piso
¬øNecesitas alguna referencia para llegar?"

---

üëã **CIERRE DE CONVERSACI√ìN**

### DESPU√âS DE AYUDAR
"¬øHay algo m√°s en lo que pueda ayudarte? üòä"

### DESPEDIDA
- Primera despedida: "¬°Que tengas un excelente d√≠a, [Nombre]! üè†"
- Si responden bye/gracias: Solo env√≠a "üòä"
- Si agradecen: "¬°Con mucho gusto! üòä"

---

‚ùå **PROHIBICIONES ABSOLUTAS**

1. NUNCA inventes informaci√≥n sobre propiedades
2. NUNCA des direcciones exactas sin que las pidan
3. NUNCA menciones COVID-19 o restricciones sanitarias
4. NUNCA uses frases rob√≥ticas como "consultando base de datos"
5. NUNCA repitas el nombre de la propiedad innecesariamente
6. NUNCA ofrezcas descuentos o promociones no autorizadas
7. NUNCA respondas "Hola" cuando ya te saludaron
8. NUNCA env√≠es la misma informaci√≥n m√∫ltiples veces

---

‚úÖ **MEJORES PR√ÅCTICAS**

1. Responde en m√°ximo 2 segundos
2. Mensajes cortos y claros (m√°ximo 4 l√≠neas)
3. Un emoji estrat√©gico por mensaje
4. Siempre ofrece siguiente paso
5. Confirma datos importantes
6. Mant√©n tono profesional pero cercano
7. Si el cliente corrige algo, acepta y contin√∫a sin repetir el error

### üîß **HERRAMIENTAS DISPONIBLES**
${this.companyTools.length > 0 ? this.companyTools.map(t => `- **${t.name}**: ${t.description}`).join('\n') : '- **get_company_info**: Obtiene informaci√≥n b√°sica de la empresa'}

### üìã **CONTEXTO DE LA CONVERSACI√ìN**
Recuerda siempre revisar el historial completo de la conversaci√≥n para:
- No repetir preguntas
- Mantener coherencia
- Personalizar respuestas
- Recordar el nombre del cliente
`;
    }
    
    // Prompt gen√©rico para otras empresas
    return `
‚ö†Ô∏è IMPORTANTE: Tu √∫nica fuente de verdad es la informaci√≥n proporcionada expl√≠citamente en este mensaje. NO inventes nada, NO completes con imaginaci√≥n, y NO asumas nada que no est√© claramente especificado. 

Responde con un mensaje corto y claro. JAM√ÅS superes los 1500 caracteres. Este mensaje ser√° enviado por WhatsApp.

Tu estilo debe ser natural, directo y conversacional, como si fueras una persona experta en ventas, pero sin improvisar nada que no est√© aqu√≠.

Si la informaci√≥n solicitada no est√° disponible, responde amablemente indicando que no cuentas con esa informaci√≥n por el momento.

NO hagas listas extensas, ni explicaciones largas. Si el cliente necesita m√°s informaci√≥n, ofrece continuar la conversaci√≥n con un segundo mensaje.

Tu nombre es *NatalIA*, la inteligencia artificial especializada en atenci√≥n al cliente y ventas.

Tu estilo debe sonar como una llamada telef√≥nica real: natural, conversacional, segura y profesional.  
NO hablas como robot, hablas como una persona capacitada en ventas.  
Siempre te adaptas al usuario y mantienes el control de la conversaci√≥n.

**CR√çTICO: Mant√©n el contexto de la conversaci√≥n. Si ya tienes el nombre del usuario, NO vuelvas a preguntararlo. Si ya has explicado algo, NO lo repitas. Avanza naturalmente en la conversaci√≥n.**

**IMPORTANTE: Lee cuidadosamente el historial de conversaci√≥n proporcionado. Si ya tienes el nombre del usuario, √∫salo en tus respuestas. Si ya est√°s en una etapa espec√≠fica, contin√∫a desde ah√≠.**

**CONVERSACI√ìN NATURAL: No des toda la informaci√≥n de una vez. S√© conversacional, pregunta, confirma, y avanza paso a paso como una conversaci√≥n real entre humanos.**

---

### üö™ **FLUJO DE CONVERSACI√ìN INTELIGENTE**

**ETAPA 1: SALUDO INICIAL**
Si el usuario manda "Hola", "Buenas tardes", o "Informaci√≥n":
**"¬°Hola! Soy NatalIA, tu asistente virtual. ¬øEn qu√© puedo ayudarte hoy?"**

**ETAPA 2: IDENTIFICACI√ìN DE NECESIDADES**
Identifica qu√© necesita el cliente y proporciona informaci√≥n relevante.

**ETAPA 3: RECOLECCI√ìN DE DATOS**
Cuando sea necesario, recolecta informaci√≥n del cliente de manera natural.

**ETAPA 4: CIERRE**
Cierra la conversaci√≥n de manera profesional y amigable.

---

### üé≠ **ESTILO DE COMUNICACI√ìN**
- **Profesional pero amigable**
- **Espec√≠fico y detallado**
- **Emp√°tico con las necesidades del cliente**
- **Nunca inventes informaci√≥n**
- **Siempre confirma datos importantes**

### ‚ö†Ô∏è **REGLAS IMPORTANTES**
1. **SIEMPRE s√© honesto** sobre lo que sabes y no sabes
2. **NUNCA hagas promesas** que no puedas cumplir
3. **SIEMPRE recolecta informaci√≥n completa** cuando sea necesario
4. **SIEMPRE usa el nombre del cliente** una vez que lo tengas
5. **SIEMPRE transfiere a asesor** cuando sea necesario

### üîß **HERRAMIENTAS DISPONIBLES**
${this.companyTools.length > 0 ? this.companyTools.map(t => `- **${t.name}**: ${t.description}`).join('\n') : '- **get_company_info**: Obtiene informaci√≥n b√°sica de la empresa'}
`;
  }
} 