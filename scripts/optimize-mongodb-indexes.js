#!/usr/bin/env node

/**
 * Script para optimizar √≠ndices de MongoDB
 * Ejecutar: node scripts/optimize-mongodb-indexes.js
 */

const { MongoClient } = require('mongodb');
const dotenv = require('dotenv');

// Cargar variables de entorno como lo hace la aplicaci√≥n
dotenv.config();

// Usar la misma configuraci√≥n que la aplicaci√≥n para QuickLearning
const MONGODB_URI = process.env.MONGO_URI_QUICKLEARNING || process.env.MONGO_URI_DEV || process.env.MONGO_URI || 'mongodb://localhost:27017/virtualvoices';

console.log('üîç URI detectada:', MONGODB_URI ? 'Configurada' : 'No encontrada');

async function optimizeIndexes() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('üîó Conectado a MongoDB');
    
    const db = client.db();
    
    // √çndices para dynamicrecords (tabla principal)
    console.log('üìä Creando √≠ndices para dynamicrecords...');
    
    // √çndice principal para consultas por tableSlug, c_name y ordenamiento
    await db.collection('dynamicrecords').createIndex(
      { tableSlug: 1, c_name: 1, updatedAt: -1, _id: 1 },
      { name: 'tableSlug_cname_updatedAt_id' }
    );
    
    // √çndice para filtros por asesor
    await db.collection('dynamicrecords').createIndex(
      { tableSlug: 1, c_name: 1, "data.asesor": 1, updatedAt: -1 },
      { name: 'tableSlug_cname_asesor_updatedAt' }
    );
    
    // √çndices para campos de tel√©fono (QuickLearning)
    await db.collection('dynamicrecords').createIndex(
      { tableSlug: 1, c_name: 1, "data.telefono": 1 },
      { name: 'tableSlug_cname_telefono' }
    );
    
    await db.collection('dynamicrecords').createIndex(
      { tableSlug: 1, c_name: 1, "data.phone": 1 },
      { name: 'tableSlug_cname_phone' }
    );
    
    await db.collection('dynamicrecords').createIndex(
      { tableSlug: 1, c_name: 1, "data.whatsapp": 1 },
      { name: 'tableSlug_cname_whatsapp' }
    );
    
    // √çndice para b√∫squedas de texto
    await db.collection('dynamicrecords').createIndex(
      { tableSlug: 1, c_name: 1, "data.nombre": 1 },
      { name: 'tableSlug_cname_nombre' }
    );
    
    // √çndices para whatsappchats
    console.log('üí¨ Creando √≠ndices para whatsappchats...');
    
    await db.collection('whatsappchats').createIndex(
      { phone: 1, "session.id": 1 },
      { name: 'phone_session_id' }
    );
    
    await db.collection('whatsappchats').createIndex(
      { phone: 1, updatedAt: -1 },
      { name: 'phone_updatedAt' }
    );
    
    await db.collection('whatsappchats').createIndex(
      { "session.id": 1, updatedAt: -1 },
      { name: 'session_id_updatedAt' }
    );
    
    // √çndice para mensajes dentro de chats
    await db.collection('whatsappchats').createIndex(
      { phone: 1, "messages.createdAt": -1 },
      { name: 'phone_messages_createdAt' }
    );
    
    console.log('‚úÖ √çndices creados exitosamente');
    
    // Mostrar estad√≠sticas de √≠ndices
    console.log('\nüìà Estad√≠sticas de √≠ndices:');
    
    const recordIndexes = await db.collection('dynamicrecords').indexes();
    console.log(`üìä dynamicrecords: ${recordIndexes.length} √≠ndices`);
    
    const chatIndexes = await db.collection('whatsappchats').indexes();
    console.log(`üí¨ whatsappchats: ${chatIndexes.length} √≠ndices`);
    
    console.log('\nüéØ Optimizaci√≥n completada. El endpoint deber√≠a ser mucho m√°s r√°pido ahora.');
    
  } catch (error) {
    console.error('‚ùå Error optimizando √≠ndices:', error);
  } finally {
    await client.close();
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  optimizeIndexes().catch(console.error);
}

module.exports = { optimizeIndexes };
